---
title: Efficient reproducible workflows with R
subtitle: robjhyndman.com/pku2025
author: Rob J Hyndman
date: 2025-07-03
toc: true
titlegraphic: bg-12.png
titlecolor: Orange
format:
  presentation-beamer:
    pdf-engine: pdflatex
include-in-header:
  text: |
    \usepackage{pifont}
    \usepackage{pmboxdraw}
    \usepackage[fixed]{fontawesome5}
execute:
  echo: true
---

## Research tools

\placefig{.5}{2.2}{width=5cm}{quarto}
\placefig{5.5}{2.2}{width=5cm}{renv}
\placefig{10.5}{2.2}{width=5cm}{targets}

# quarto

## Reproducibility

\begin{textblock}{8.6}(1,1)\fontsize{14}{15}\sf
\begin{block}{Not reproducible:}
\begin{itemize}\tightlist
\item Data edited in a spreadsheet
\item Click and point analysis
\item Copy and paste graphs and tables
\item Tables typed by hand
\end{itemize}
\end{block}
\begin{alertblock}{Reproducible}
\begin{itemize}\tightlist
\item All data edits scripted
\item All analysis scripted
\item Graphs and tables automatically pulled in to the thesis
\item Tables generated with scripts
\end{itemize}
\end{alertblock}
\end{textblock}

\placefig{10.7}{0}{width=5.35cm}{2g9914}

## Quarto

\placefig{0.3}{1.25}{height = 6.5cm}{figs/quarto}

\begin{textblock}{9.5}(6.2, 1.1)
\fontsize{14}{15}\sf
\begin{itemize}\tightlist
\item Next generation of Rmarkdown.
\item Supports R, Python, Javascript and Julia chunks.
\item Separates style from content
\item Format complex equations
\item Automatic numbering and bibliography
\item Many output formats, and many options for customizing format.
\item Download and help: \url{quarto.org}
\end{itemize}
\end{textblock}

\placefig{5}{7.2}{width=10cm}{figs/qmd.png}


## Code chunks

Chunk options use the hash-pipe `#|`

````{verbatim}
```{r}
#| label: fig-chunklabel
#| fig-caption: My figure
#| fig-width: 6
#| fig-height: 4
mtcars |>
  ggplot(aes(x = mpg, y = wt)) +
  geom_point()
```
````

Reference the figure using `@fig-chunklabel`.

## Extensions and templates
\fontsize{13}{17}\sf

* Quarto extensions modify and extend functionality.
* They are stored locally, in the `_extensions` folder alongside the qmd document.
* See <https://quarto.org/docs/extensions/> for a list.
* Templates are extensions used to define new output formats.
* Journal templates at\newline <https://quarto.org/docs/extensions/listing-journals.html>
* Monash templates at\newline <https://github.com/quarto-monash>

## quarto on the command line
\fontsize{14}{14.5}\sf\vspace*{-0.4cm}

* `quarto render` to render a quarto or Rmarkdown document.
* `quarto preview` to preview a quarto or Rmarkdown document.
* `quarto add <gh-org>/<gh-repo>` to add an extension from a github repository.
* `quarto update <gh-org>/<gh-repo>` to update an extension
* `quarto remove <gh-org>/<gh-repo>` to remove an extension
* `quarto list extensions installed`
* `quarto use template <gh-org>/<gh-repo>` to use existing repo as starter template.

## Add a custom format

From the CLI:\qquad  `quarto add quarto-monash/memo`\pause

New folder/files added

```{verbatim}
├── _extensions
│   └── quarto-monash
│       └── memo
│           └── ...
```

\pause

Update YAML

```{verbatim}
---
title: "My new file using the Monash memo format"
format: memo-pdf
---
```


# renv

## Reproducible environments

\placefig{0.3}{1.25}{height = 6.5cm}{figs/renv}

\begin{textblock}{9.5}(6.2, 1.3)
\begin{itemize}\tightlist
\item Creates project-specific R environments.
\item Uses a package cache so you are not repeatedly installing the same packages in multiple projects.
\item Does not ensure R itself, system dependencies or the OS are the same.
\item Not a replacement for Docker or Apptainer.
\end{itemize}
\end{textblock}

## Reproducible environments
\placefig{0.3}{1.25}{height = 6.5cm}{figs/renv}

\begin{textblock}{9.5}(6.2, 1.3)
\begin{itemize}\tightlist
\item Can use packages from CRAN, Bioconductor, GitHub, Gitlab, Bitbucket, etc.
\item \texttt{renv::init()} to initialize a new project.
\item \texttt{renv::snapshot()} to save state of project to \texttt{renv.lock}.
\item \texttt{renv::restore()} to restore project as saved in \texttt{renv.lock}.
\item \texttt{renv::update()} gets latest versions of all dependencies from wherever they were installed from.
\end{itemize}
\end{textblock}

# targets

## targets: reproducible computation at scale

\placefig{0.5}{1.8}{width=5cm}{images/logo.png}

\begin{textblock}{15}(0.5,8.5)
\textcolor{gray}{\footnotesize Some images from https://wlandau.github.io/targets-tutorial}
\end{textblock}

\begin{textblock}{10}(6, 2)
\begin{itemize}
\item Supports a clean, modular, function-oriented programming style.
\item Learns how your pipeline fits together.
\item Runs only the necessary computation.
\item Abstracts files as R objects.
\item Similar to Makefiles, but with R functions.
\end{itemize}
\end{textblock}

## Interconnected tasks

\only<1>{\placefig{0.5}{2}{width=13cm}{images/workflow.png}}
\only<2>{\placefig{0.5}{2}{width=13cm}{images/change.png}}
\only<3>{\placefig{0.5}{2}{width=13cm}{images/downstream.png}}

## Dilemma: short runtimes or reproducible results?

\placefig{0.8}{1.1}{height = 7.8cm}{images/decisions.png}

## Let a pipeline tool do the work

\fullwidth{images/pipeline_graph.png}\vspace*{-0.15cm}

* Save time while ensuring computational reproducibility.
* Automatically skip tasks that are already up to date.


## Typical project structure

### no_targets.R
\vspace*{-0.26cm}

```{r}
#| eval: false
library(tidyverse)
library(fable)
source("R/functions.R")
my_data <- read_csv("data/my_data.csv")
my_model <- model_function(my_data)
```

\pause

### _targets.R
\vspace*{-0.26cm}

```{r}
#| eval: false
library(targets)
tar_option_set(packages = c("tidyverse", "fable"))
tar_source() # source all files in R folder
list(
  tar_target(my_file, "data/my_data.csv", format = "file"),
  tar_target(my_data, read_csv(my_file)),
  tar_target(my_model, model_function(my_data))
)
```


## Generate `_targets.R` in working directory

```{r}
#| eval: false
library(targets)
tar_script()
```


## Useful targets commands

* `tar_make()` to run the pipeline.
* `tar_make(starts_with("fig"))` to run only targets starting with "fig".
* `tar_read(object)` to read a target.
* `tar_load(object)` to load a target.
* `tar_load_everything()` to load all targets.
* `tar_manifest()` to list all targets
* `tar_visnetwork()` to visualize the pipeline.
* `tar_destroy()` to remove all targets.
* `tar_outdated()` to list outdated targets.

## Random numbers

* Each target runs with its own seed based on its name and the global seed from `tar_option_set(seed = ???)`
* So running only some targets, or running them in a different order, will not change the results.

## Folder structure

```{verbatim}
├── .git/
├── .Rprofile
├── .Renviron
├── renv/
├── index.Rmd
├── _targets/
├── _targets.R
├── _targets.yaml
├── R/
├──── functions_data.R
├──── functions_analysis.R
├──── functions_visualization.R
├── data/
└──── input_data.csv
```

## `_targets.R` with quarto

```{r}
#| eval: false
library(targets)
library(tarchetypes)                                                 # <1>
tar_source() # source all files in R folder
tar_option_set(packages = c("tidyverse", "fable"))
list(
  tar_target(my_file, "data/my_data.csv", format = "file"),
  tar_target(my_data, read_csv(my_file)),
  tar_target(my_model, model_function(my_data)),
  tar_quarto(report, "file.qmd", extra_files = "references.bib")     # <2>
  )
```

1. Load `tarchetypes` package for quarto support.
2. Add a quarto target.

Replace quarto chunks with `tar_read()` or `tar_load()`.

## Chunk options

### Chunk with regular R code

````{verbatim}
```{r}
#| label: fig-chunklabel
#| fig-caption: My figure
mtcars |>
  ggplot(aes(x = mpg, y = wt)) +
  geom_point()
```
````

\pause

### Chunk with targets

````{verbatim}
```{r}
#| label: fig-chunklabel
#| fig-caption: My figure
tar_read(my_plot)
```
````

## Example paper

\placefig{0}{1.1}{height=8cm}{jors.png}

\begin{textblock}{9.4}(6.2,1.1)
\begin{block}{}\fontsize{12}{16}\sf
\begin{tabular}{p{5cm}l@{}}
Hyndman RJ, Rostami-Tabar B (2024) Forecasting interrupted time series, \textit{Journal of the Operational Research Society}, in press.
& \raisebox{-3cm}{\includegraphics[width=3.6cm,height=3.6cm]{qr-code}}
\end{tabular}
\end{block}
\end{textblock}
\begin{textblock}{9.4}(6.2,5.4)\fontsize{14}{14}\sf
\begin{alertblock}{}
\href{https://github.com/bahmanrostamitabar/forecasting_interrupted_time_series}{\tt\faIcon{github} bahmanrostamitabar/\\\hspace*{1.7ex} \rlap{forecasting\_interrupted\_time\_series}}
\end{alertblock}
\end{textblock}


## Slides and links
\fontsize{24}{30}\sf

\vspace*{2cm}

\begin{alertblock}{}
\centerline{\href{https://robjhyndman.com/pku2025}{\tt\bfseries robjhyndman.com/pku2025}}
\end{alertblock}\vspace*{0.4cm}

\begin{block}{}
\centerline{\href{https://robjhyndman.com/postdoc}{\tt\bfseries robjhyndman.com/postdoc}}
\end{block}
